[package]
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
name = "{{ template_id }}"
publish.workspace = true
repository.workspace = true
version.workspace = true

[dependencies]
breda = { workspace = true, default-features = false, features = ["runtime_only_current_platform"] }
breda-app-support.workspace = true

adlx.workspace = true
anyhow.workspace = true
chrono.workspace = true
clap.workspace = true
crossbeam-channel.workspace = true
csv.workspace = true
discord-sdk = { workspace = true, optional = true }
directories.workspace = true
dolly.workspace = true
tokio = { workspace = true, optional = true }
egui-phosphor.workspace = true
egui_commonmark.workspace = true
egui_extras.workspace = true
enum-map.workspace = true
glam.workspace = true
image.workspace = true
log.workspace = true
log-once.workspace = true
mirror-mirror.workspace = true
named-lock.workspace = true
nvapi-sys.workspace = true
parking_lot.workspace = true
puffin_egui.workspace = true
qrcode.workspace = true
rand_core.workspace = true
rand_pcg.workspace = true
rust-i18n.workspace = true
sanitize-filename.workspace = true
sentry.workspace = true
serde.workspace = true
serde_json.workspace = true
sha2.workspace = true
thiserror.workspace = true
time.workspace = true
tracing-subscriber.workspace = true
tracing.workspace = true
ureq.workspace = true
urlencoding.workspace = true
webbrowser.workspace = true
wry.workspace = true

[dev-dependencies]
insta.workspace = true

[target.'cfg(target_os = "android")'.dependencies]
android-activity.workspace = true
android-intent.workspace = true
jni.workspace = true
shlex.workspace = true

[target.'cfg(any(all(target_os = "windows", target_arch = "x86_64"), target_os = "linux", target_os = "darwin"))'.dependencies]
steamworks.workspace = true

[target.'cfg(not(target_os = "macos"))'.dependencies]
rpmalloc.workspace = true

[target.'cfg(target_os = "windows")'.dependencies]
windows = { workspace = true, features = [
    "Win32_Foundation",
    "Win32_System_Power",
    "Win32_UI_Controls",
    "Win32_UI_WindowsAndMessaging",
    "Win32_UI_Input",
] }
evolve-dxdiag.workspace = true
evolve-wmi.workspace = true
pelite.workspace = true

[target.'cfg(not(any(target_os = "windows", target_os = "android")))'.dependencies]
native-dialog.workspace = true

[target.'cfg(windows)'.dependencies]
igcl.workspace = true

[target.'cfg(target_os = "linux")'.dependencies]
gtk.workspace = true

[build-dependencies]
breda-build.workspace = true
cfg_aliases.workspace = true

[features]
default = ["development"]

# Note: evolve-android has its own development/retail features which may need
# a corresponding change in evolve-android/Cargo.toml.
development = [
    "breda/development",
    # Add the highest tier feature that has all functionality, so that devs always have access to everything.
    "professional",
    "nrc",
]

# Note: evolve-android has its own development/retail features which may need
# a corresponding change in evolve-android/Cargo.toml.
retail = [
    "breda/retail",
    "pre_cooked_assets",
    "discord",
]

# Free ownership.
#
# Should not be used in `cfg` guards, use `Ownership` instead.
free = []

# Advanced ownership.
#
# Should not be used in `cfg` guards, use `Ownership` instead.
advanced = []

# Professional ownership.
#
# Should not be used in `cfg` guards, use `Ownership` instead.
professional = []

# Run kiosk mode.
kiosk_mode = []

# Allow running NRC benchmarks
nrc = ["evolve-highscore-api/nrc"]

native_certs = ["breda/native-certs", "ureq/native-certs"]

pre_cooked_assets = ["breda/pre_cooked_assets"]
discord = ["dep:tokio", "dep:discord-sdk"]
